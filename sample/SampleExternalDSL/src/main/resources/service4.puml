@startuml

participant integrationflowlicense : IntegrationFlow("Message_Filter")

participant inboundendpointhttp1 : InboundEndpoint(protocol("http"),port(8280),context("/sample/request"))

participant pipeline1 : Pipeline("message_flow_1")

participant outboundendpoint1 : OutboundEndpoint(protocol("http"),host("http://localhost:9000/services/SimpleStockQuoteService"))

participant outboundendpoint2 : OutboundEndpoint(protocol("http"),host("http://localhost:9001/services/SimpleStockQuoteService"))

inboundendpointhttp1 -> pipeline1 : "request"

process_message("log",configs("before.filter"))

alt condition(source("routeId","Transport"),pattern("r1"))
    process_message("log",configs("filter.true"))
    process_message("call",configs("outboundendpoint1"))
    pipeline1 -> outboundendpoint1 : "Validate_policy"
    outboundendpoint1 -> pipeline1 : "Validate_response"

else
    process_message("log",configs("filter.false"))
    process_message("call",configs("outboundendpoint2"))
    pipeline1 -> outboundendpoint2 : "Validate_policy"
    outboundendpoint2 -> pipeline1 : "Validate_response"
end

process_message("log",configs("after.filter"))
process_message("respond",configs())

pipeline1 -> inboundendpointhttp1 : "Final_Response"


@enduml